// Command line aguments:
// d_mr     : mutation rate per base per generation
// d_sel    : deleterious selection coefficent per base per generation (scaled by lambda)
// d_chr    : chromosome length in bases
// d_rr     : recombination rate per base per generation
// d_samp   : sample size in haploids
// d_size   : scaling factor

initialize() {
  // uniform mutation rate of d_mr
  initializeMutationRate(d_mr);

  // m1 mutation type: neutral
  // m2 mutation type: recessive negative selection with gamma distribution of mean 0.1 and shape 0.2
  initializeMutationType("m1", 0.5, "f", 0.0);
  initializeMutationType("m2", 0.1, "g", -d_sel, 0.2);

  // g1 genomic element type: uses m1 for all mutations
  // g2 genome element type is a UTR, 50% of mutations are deleterious
  // g3 genome element type is an exon, 75% of mutations are deleterious
  // g4 genome element type is an intron, 10% of mutations are deleterious
  initializeGenomicElementType("g1", m1, 1.0);
  initializeGenomicElementType("g2", c(m1,m2), c(1,1));
  initializeGenomicElementType("g3", c(m1,m2), c(1,3));
  initializeGenomicElementType("g4", c(m1,m2), c(9,1)); 

  // uniform chromosome of length d_chr in bases
  initializeGenomicElement(g1, 0, asInteger(d_chr/2)-27500-1);
  initializeGenomicElement(g2, asInteger(d_chr/2)-27500, asInteger(d_chr/2)-27500 + 200);
  for (elem in 0:49) {
    initializeGenomicElement(g3, asInteger(d_chr/2)-27500 + 201 + (elem * 1100), asInteger(d_chr/2)-27500 + 300 + (elem * 1100));      
    if (elem < 49) {        
      initializeGenomicElement(g4, asInteger(d_chr/2)-27500 + 301 + (elem * 1100), asInteger(d_chr/2)-27500 + 1300 + (elem * 1100));
    }
  }
  initializeGenomicElement(g2, asInteger(d_chr/2)+27500-800+1, asInteger(d_chr/2)+27500);
  initializeGenomicElement(g1, asInteger(d_chr/2)+27500+1, d_chr);

  // uniform recombinatino rate d_rr
  initializeRecombinationRate(d_rr);
}

// Create the ancestral African population
1 {
  defineConstant("simID", getSeed());
  sim.addSubpop("p1", d_size); 
}

// run to generation 12N divided 
12000 late() { 
  p1.outputMSSample(d_samp);
}

